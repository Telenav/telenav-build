#!/usr/bin/perl

#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
#  Â© 2011-2021 Telenav, Inc.
#  Licensed under Apache License, Version 2.0
#
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

use 5.018;
use strict;
use warnings;

use feature qw( switch );
no warnings qw( experimental::smartmatch );

#
# Retrieve environment variables
#

our $workspace = $ENV{'TELENAV_WORKSPACE'};
our $kivakit_debug = $ENV{'KIVAKIT_DEBUG'};
if (! defined $kivakit_debug)
{
    $kivakit_debug = "!Debug";
}

#
# Global variables populated during parsing of arguments
#

our @build_scopes = ();
our @build_types = ();
our @build_modifiers = ("quiet");
our @build_folders = ();
our $build_threads = 12;
our $build_javadoc = 0;
our $build_dry_run = 0;
our $build_clean_script = "";

our $resolved_scope = "";
our @resolved_families = ();

our @maven_scope_switches = ();
our @maven_arguments = ();
our @maven_switches = ();

our @allowed_scopes = ("all", "this", "kivakit", "mesakit", "lexakai");
our @allowed_build_types = ("compile", "release", "release-local", "tools", "dmg", "javadoc", "lexakai-documentation", "help");
our @allowed_build_modifiers = ("attach-jars", "clean", "clean-forced", "clean-sparkling", "debug", "debug-tests", "dry-run", "no-javadoc", "no-tests", "quick-tests", "quiet", "verbose", "single-threaded", "tests");

sub build
{
    chdir $workspace;
    start_build();

    if ($build_dry_run == 0)
    {
        if ($build_clean_script ne "")
        {
            system($build_clean_script);
        }
        if (system("maven --quiet -f telenav-superpom/pom.xml clean install") != 0)
        {
            fail("Unable to install superpoms");
        }
        if (system("maven @maven_scope_switches @maven_switches @maven_arguments") != 0)
        {
            fail("Build failed");
        }
    }

    end_build();
}

sub check_tools
{
    # Parse Java version from output like: openjdk version "17.0.3" 2022-04-19 LTS
    my $java_output = `java -version 2>&1`;
    if ($java_output =~ /(\d+\.\d+\.\d+)/)
    {
        # Check Java version
        my $java_version = $1;
        my ($java_major_version) = $java_version =~ /(\d+)\./;
        if ($java_major_version < 17)
        {
            fail(qq!
    Telenav Open Source projects require Java 17
    To install: https://jdk.java.net/archive/
    !);
        }
        else
        {
            say("\nJava $java_version");
        }
    }
    else
    {
        fail("Couldn't find Java version in:\n$java_output");
    }

    # Parse Git version from output like: git version 2.36.1
    my $git_output = `git --version 2>&1`;
    if ($git_output =~ /(\d+\.\d+\.\d+)/)
    {
        # Check Git version
        my $git_version = $1;
        my ($git_major_version, $git_minor_version) = $git_version =~ /(\d+)\.(\d+)/;
        if ($git_major_version < 2 || $git_minor_version < 30)
        {
            fail("Telenav Open Source projects require Git version 2.30 or higher");
        }
        else
        {
            say("Git $git_version\n");
        }
    }
    else
    {
        fail("Couldn't find Git version in:\n$git_output");
    }
}

sub parse_build_modifiers
{
    if (grep(/^verbose$/, @build_modifiers))
    {
        @build_modifiers = grep(!/^quiet$/, @build_modifiers);
    }

    foreach my $modifier (@build_modifiers)
    {
        given ($modifier)
        {
            when ("attach-jars")
            { push(@maven_arguments, "-P", "attach-jars") }
            when ("clean")
            { $build_clean_script = "telenav-clean" }
            when ("clean-forced")
            { $build_clean_script = "telenav-clean-forced" }
            when ("clean-sparkling")
            { $build_clean_script = "telenav-clean-sparkling" }
            when ("debug")
            { push(@maven_switches, "--debug") }
            when ("debug-tests")
            { push(@maven_switches, "-Dmaven.surefire.debug") }
            when ("dmg")
            { push(@maven_switches, "-P", "dmg") }
            when ("docker")
            { push(@maven_switches, "-P", "docker") }
            when ("documentation")
            { push(@maven_switches, "-P", "release") }
            when ("dry-run")
            { $build_dry_run = 1 }
            when ("javadoc")
            { $build_javadoc = 1 }
            when ("lexakai-documentation")
            { push(@maven_arguments, "com.telenav.cactus:cactus-maven-plugin:lexakai") }
            when ("multi-threaded")
            {}
            when ("no-javadoc")
            { push(@maven_switches, "-Dmaven.javadoc.skip=true") }
            when ("no-tests")
            { push(@maven_switches, "-Dmaven.test.skip=true") }
            when ("quick-tests")
            { push(@maven_switches, "-P", "test-quick") }
            when ("quiet")
            { push(@maven_switches, "--quiet", "-Dsurefire.printSummary=false", "-DKIVAKIT_LOG_LEVEL=Warning") }
            when ("sign-artifacts")
            { push(@maven_switches, "-P", "sign-artifacts") }
            when ("single-threaded")
            { $build_threads = 1 }
            when ("tests")
            {}
            when ("tools")
            { push(@maven_switches, "-P", "tools") }
            default
            { usage("Build modifier $modifier is not recognized") }
        }
    }
}

sub parse_build_types
{
    foreach my $build_type (@build_types)
    {
        given ($build_type)
        {
            when ("compile")
            {
                push(@maven_arguments, "clean", "compile");
                push(@build_modifiers, "multi-threaded", "no-tests", "no-javadoc");
            }
            when ("default")
            {
                push(@maven_arguments, "clean", "install");
                push(@build_modifiers, "multi-threaded", "tests", "no-javadoc");
            }
            when ("dmg")
            {
                push(@maven_arguments, "clean", "install");
                push(@build_modifiers, "multi-threaded", "tests", "tools", "dmg", "no-javadoc");
            }
            when ("help")
            {
                usage();
            }
            when ("javadoc")
            {
                push(@build_modifiers, "multi-threaded", "no-tests", "javadoc")
            }
            when ("lexakai-documentation")
            {
                push(@build_modifiers, "lexakai-documentation");
            }
            when ("release")
            {
                push(@maven_arguments, "clean", "install", "com.telenav.cactus:cactus-maven-plugin:check-published", "nexus-staging:deploy");
                push(@build_modifiers, "single-threaded", "clean-sparkling", "documentation", "attach-jars", "sign-artifacts")
            }
            when ("release-local")
            {
                push(@maven_arguments, "clean", "install");
                push(@build_modifiers, "single-threaded", "clean-sparkling", "documentation", "tests", "attach-jars", "sign-artifacts")
            }
            when ("test")
            {
                push(@maven_arguments, "clean", "install");
                push(@build_modifiers, "single-threaded", "tests", "no-javadoc");
            }
            when ("tools")
            {
                push(@maven_arguments, "clean", "install");
                push(@build_modifiers, "multi-threaded", "tests", "tools", "no-javadoc");
            }
            default
            {
                usage("Unrecognized build type: $build_type");
            }
        }
    }
}

sub parse_arguments
{
    my @arguments = @_;

    for my $argument (@arguments)
    {
        if (grep(/^$argument$/, @allowed_scopes))
        {
            push(@build_scopes, $argument);
        }
        elsif (grep(/^$argument$/, @allowed_build_types))
        {
            push(@build_types, $argument);
        }
        elsif (grep(/^$argument$/, @allowed_build_modifiers))
        {
            push(@build_modifiers, $argument);
        }
        else
        {
            usage("Invalid argument: $argument");
        }
    }

    if (@build_scopes == 0)
    {
        @build_scopes = ("all");
    }
    if (@build_types == 0)
    {
        @build_types = ("default");
    }
    if (@build_types > 1)
    {
        usage("No more than one of these build types is allowed: @build_types");
    }
}

sub resolve_build_folders
{
    foreach my $scope (@build_scopes)
    {
        given ($scope)
        {
            when ("all")
            {
                @build_folders = ("$workspace/telenav-superpom", "$workspace/kivakit", "$workspace/lexakai", "$workspace/mesakit");
            }
            when ("this")
            {
                @build_folders = ("$workspace/telenav-superpom", ".");
            }
            default
            {
                @build_folders = ("$workspace/telenav-superpom", "$workspace/${scope}");
            }
        }
    }
}

sub parse_build_scopes
{
    resolve_scope_switches(join(",", @build_scopes));
}

sub resolve_scope_switches
{
    my $scope = shift;

    resolve_scope($scope);

    my $families = join(",", @resolved_families);

    if (@resolved_families == 1)
    {
        @maven_scope_switches = ("-Dcactus.scope=$resolved_scope", "-Dcactus.family=\"$families\"");
    }
    else
    {
        @maven_scope_switches = ("-Dcactus.scope=\"$resolved_scope\"", "-Dcactus.families=\"$families\"");
    }
}

sub resolve_scope
{
    my $scope = shift;

    @resolved_families = ();

    given ($scope)
    {
        when ("all")
        {
            $resolved_scope = "all";
        }
        when ("all-project-families")
        {
            $resolved_scope = "all-project-families";
        }
        when ("this" || "just-this")
        {
            $resolved_scope = "just-this";
        }
        default
        {
            if ($scope eq "")
            {
                $resolved_scope = "all";
            }
            else
            {
                $resolved_scope = "family";
                @resolved_families = split(/,/, $scope);
            }
        }
    }
}

sub say
{
    my ($text) = @_;
    println("â $text");
}

sub println
{
    my ($text) = @_;
    print "$text\n";
}

sub fail
{
    my ($text) = @_;
    print $text;
    exit 1;
}

sub require_variable
{
    my ($variable, $help) = @_;
    if (! defined $ENV{$variable})
    {
        usage($help);
    }
}

sub say_block
{
    my ($text) = @_;
    print "\n$text\n\n";
}

sub usage
{
    my ($problem) = @_;
    if ($problem ne "")
    {
        say_block($problem);
    }

    print q#
Usage: telenav-build [build-scope|build-type|build-modifiers]*

  BUILD SCOPES

                    all - build all projects
                 cactus - build only the cactus project
                kivakit - build only the kivakit project
                lexakai - build only the lexakai project
                mesakit - build only the mesakit project
                   this - build only the project in the current folder

  BUILD TYPES

               [default] - compile and run all tests
                 compile - compile(no tests)
                     dmg - compile, run tests, build tools, build dmg
                 javadoc - build javadoc documentation
                 release - clean-sparkling, compile, run tests, build javadoc, attach jars, sign artifacts and deploy to OSSRH
           release-local - clean-sparkling, compile, run tests, build javadoc, attach jars, sign artifacts and deploy to local Maven repository
                   tools - compile, run tests, build tools

  BUILD MODIFIERS

             attach-jars - attach source and javadoc jars to maven artifacts
                   clean - prompt to remove cached and temporary files and telenav artifacts from ~/.m2
            clean-forced - remove cached and temporary files and telenav artifacts from ~/.m2
         clean-sparkling - prompt to remove entire .m2 repository and all cached and temporary files
                   debug - turn maven debug mode on
             debug-tests - stop in debugger on surefire tests
                 dry-run - show maven command line but don't build
                 javadoc - build javadoc documentation
              no-javadoc - do not build javadoc
                no-tests - do not run tests
             quick-tests - run only quick tests
                 verbose - build with full output
         single-threaded - build with only one thread
                   tests - run all tests

#;
    die;
}

sub start_build
{
    my $folders = join("\nâ              -", @build_folders);

    print <<~EOF;
    ââââââââââââââââââââââââââââââââââââââââââââ« Building
    â
    â           Build Scopes: @build_scopes
    â             Build Type: @build_types
    â        Build Modifiers: @build_modifiers
    â
    â          Build Folders: $folders
    â
    â   Maven Scope Switches: @maven_scope_switches
    â         Maven Switches: @maven_switches
    â        Maven Arguments: @maven_arguments
    â
    â              Workspace: $workspace
    â
    â     mvn @maven_scope_switches @maven_switches @maven_arguments
    â
    EOF
}

sub end_build
{
    print <<~EOF;
    â
    ââââââââââââââââââââââââââââââââââââââââââââ« Built
    EOF
}

#
# Check build prerequisites
#

require_variable("M2_HOME", "Must set M2_HOME");
require_variable("JAVA_HOME", "Must set JAVA_HOME");
require_variable("TELENAV_WORKSPACE", "Must set TELENAV_WORKSPACE");
check_tools();

#
# Parse arguments in four phases:
#
#   1. For each argument, put it in the appropriate array based on whether it is a scope, a build type, or a build modifier
#   2. For each build type, translate it into one or more build modifiers
#   3. For each build modifier, translate it into maven arguments and switches
#

parse_arguments(@_);
parse_build_types();
parse_build_modifiers();
parse_build_scopes();

push(@maven_switches, "-DKIVAKIT_DEBUG=\"$kivakit_debug\"");
push(@maven_switches, "--threads", "$build_threads");

build();
